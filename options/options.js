// Â≠òÂÇ®ËÆæÁΩÆÈ°π
let settings = {
    apiEndpoint: '',
    apiKey: '',
    selectedModel: '',
    shortcut: 'Alt+Q'
};

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    initializeEventListeners();
});


// Âä†ËΩΩ‰øùÂ≠òÁöÑËÆæÁΩÆ
function loadSettings() {
    chrome.storage.sync.get([
        'apiEndpoint',
        'apiKey',
        'selectedModel',
        'shortcut'
    ], (result) => {
        settings = { ...settings, ...result };

        // Â°´ÂÖÖË°®Âçï
        document.getElementById('apiEndpoint').value = settings.apiEndpoint || '';
        document.getElementById('apiKey').value = settings.apiKey || '';
        document.getElementById('currentShortcut').textContent = settings.shortcut || 'Alt+Q';

       if (settings.selectedModel) {
            const modelSelect = document.getElementById('model');
            modelSelect.innerHTML = `<option value="${settings.selectedModel}">${settings.selectedModel}</option>`;
            // Display selected model name
            document.getElementById('currentModelName').textContent = `ÂΩìÂâçÊ®°Âûã: ${settings.selectedModel}`;
        }
    });
}

// ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨
function initializeEventListeners() {
    // ‰øùÂ≠òËÆæÁΩÆÊåâÈíÆ
    document.getElementById('saveSettings').addEventListener('click', saveSettings);

    // ÊµãËØïËøûÊé•ÊåâÈíÆ
    document.getElementById('testConnection').addEventListener('click', testConnection);

    // Ê£ÄÊµãÊ®°ÂûãÊåâÈíÆ
    document.getElementById('detectModels').addEventListener('click', detectAvailableModels);

    // ‰øÆÊîπÂø´Êç∑ÈîÆÊåâÈíÆ
    document.getElementById('changeShortcut').addEventListener('click', startShortcutCapture);

    // ÂàáÊç¢ÂØÜÁ†ÅÂèØËßÅÊÄß
    document.querySelector('.toggle-password').addEventListener('click', togglePasswordVisibility);

    // ÂÖ≥Èó≠Áä∂ÊÄÅÊ∂àÊÅØ
    document.querySelector('.close-status').addEventListener('click', () => {
        document.getElementById('status').classList.remove('show');
    });
}

// ‰øùÂ≠òËÆæÁΩÆ
async function saveSettings() {
    const newSettings = {
        apiEndpoint: document.getElementById('apiEndpoint').value,
        apiKey: document.getElementById('apiKey').value,
        selectedModel: document.getElementById('model').value,
        shortcut: document.getElementById('currentShortcut').textContent
    };

    try {
        await chrome.storage.sync.set(newSettings);
        showStatus('ËÆæÁΩÆÂ∑≤‰øùÂ≠ò', 'success');
    } catch (error) {
        showStatus('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•: ' + error.message, 'error');
    }
}

// ÊµãËØïAPIËøûÊé•
async function testConnection() {
    const endpoint = document.getElementById('apiEndpoint').value;
    const apiKey = document.getElementById('apiKey').value;

    if (!endpoint || !apiKey) {
        showStatus('ËØ∑ÂÖàÂ°´ÂÜôAPIÂú∞ÂùÄÂíåÂØÜÈí•', 'error');
        return;
    }

    try {
        const response = await fetch(`${endpoint}/models`, {
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        if (response.ok) {
            showStatus('ËøûÊé•ÊµãËØïÊàêÂäü', 'success');
        } else {
            throw new Error('APIÂìçÂ∫îÈîôËØØ');
        }
    } catch (error) {
        showStatus('ËøûÊé•ÊµãËØïÂ§±Ë¥•: ' + error.message, 'error');
    }
}

// Ê£ÄÊµãÂèØÁî®Ê®°Âûã
async function detectAvailableModels() {
    const endpoint = document.getElementById('apiEndpoint').value;
    const apiKey = document.getElementById('apiKey').value;

    if (!endpoint || !apiKey) {
        showStatus('ËØ∑ÂÖàÂ°´ÂÜôAPIÂú∞ÂùÄÂíåÂØÜÈí•', 'error');
        return;
    }

    try {
        const response = await fetch(`${endpoint}/models`, {
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        if (!response.ok) throw new Error('Ëé∑ÂèñÊ®°ÂûãÂàóË°®Â§±Ë¥•');

        const data = await response.json();
        const modelSelect = document.getElementById('model');
        modelSelect.innerHTML = data.data
            .map(model => `<option value="${model.id}">${model.id}</option>`)
            .join('');

        showStatus('Â∑≤Êõ¥Êñ∞ÂèØÁî®Ê®°ÂûãÂàóË°®', 'success');
    } catch (error) {
        showStatus('Ëé∑ÂèñÊ®°ÂûãÂàóË°®Â§±Ë¥•: ' + error.message, 'error');
    }
}

// ÂºÄÂßãÊçïËé∑Âø´Êç∑ÈîÆ
function startShortcutCapture() {
    const shortcutDisplay = document.getElementById('currentShortcut');
    const originalText = shortcutDisplay.textContent;
    shortcutDisplay.textContent = 'ËØ∑Êåâ‰∏ãÊñ∞ÁöÑÂø´Êç∑ÈîÆ...';
    shortcutDisplay.style.color = 'var(--primary-color)';

    const captureHandler = (e) => {
        e.preventDefault();
        const keys = [];
        if (e.ctrlKey) keys.push('Ctrl');
        if (e.altKey) keys.push('Alt');
        if (e.shiftKey) keys.push('Shift');
        if (e.key.toUpperCase() !== 'CONTROL' && 
            e.key.toUpperCase() !== 'ALT' && 
            e.key.toUpperCase() !== 'SHIFT') {
            keys.push(e.key.toUpperCase());
        }

        if (keys.length > 0) {
            const newShortcut = keys.join('+');
            shortcutDisplay.textContent = newShortcut;
            shortcutDisplay.style.color = '';
            document.removeEventListener('keydown', captureHandler);
            
            // Êõ¥Êñ∞Âø´Êç∑ÈîÆËÆæÁΩÆ
            chrome.commands.update({
                name: 'toggle-analysis',
                shortcut: newShortcut
            });
        }
    };

    document.addEventListener('keydown', captureHandler);
}

// ÂàáÊç¢ÂØÜÁ†ÅÂèØËßÅÊÄß
function togglePasswordVisibility() {
    const passwordInput = document.getElementById('apiKey');
    const eyeIcon = document.querySelector('.eye-icon');
    
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        eyeIcon.textContent = 'üëÅÔ∏è';
    } else {
        passwordInput.type = 'password';
        eyeIcon.textContent = 'üëÅÔ∏è‚Äçüó®Ô∏è';
    }
}

// ÊòæÁ§∫Áä∂ÊÄÅÊ∂àÊÅØ
function showStatus(message, type = 'success') {
    const statusElement = document.getElementById('status');
    const statusText = statusElement.querySelector('.status-text');
    
    statusElement.className = 'status-message';
    statusElement.classList.add(type);
    statusElement.classList.add('show');
    statusText.textContent = message;
    
    // 3ÁßíÂêéËá™Âä®ÈöêËóè
    setTimeout(() => {
        statusElement.classList.remove('show');
    }, 3000);
}
